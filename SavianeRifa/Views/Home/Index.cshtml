@{
    ViewData["Title"] = "Home Page";
}

<div class="row">
    <div class="col-12 mb-4">
        <div class="card shadow-sm">
            <div class="row g-0">
                <div class="col-md-4 d-flex align-items-center justify-content-center p-3">
                    <!-- Foto da cunhada: substitua a src pela foto real -->
                    <img id="foto-cunhada" src="/img/saviane.jpeg" alt="Foto da beneficiária" class="img-fluid rounded"
                        style="max-height:250px; object-fit:cover;" />
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <h2 class="card-title">Ajude com o tratamento</h2>
                        <p class="card-text">Este projeto tem por objetivo arrecadar fundos para ajudar nos custos do
                            tratamento da minha cunhada, que é portadora de insuficiência renal. Ao adquirir rifas você
                            estará contribuindo diretamente com consultas, medicamentos e deslocamentos. Obrigado pelo
                            apoio.</p>
                        <p class="card-text"><small class="text-muted">Escolha uma ou mais rifas abaixo. Rifas já
                                vendidas aparecem desabilitadas.</small></p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <h3>Rifas disponíveis</h3>
            <div>
                <span class="me-3">Selecionadas: <span id="selected-count">0</span></span>
                <button id="concluir-btn" class="btn btn-primary" disabled data-bs-toggle="modal"
                    data-bs-target="#pixModal">Comprar</button>
            </div>
        </div>

        <div id="rifas-list" class="row g-3">
            <!-- Rifas serão renderizadas por JS (substitua por rendering server-side quando integrar) -->
        </div>
    </div>
</div>

<!-- Modal PIX -->
<div class="modal fade" id="pixModal" tabindex="-1" aria-labelledby="pixModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="padding: 20px;">
            <form asp-controller="Home" asp-action="RegistrarCompra" method="post" enctype="multipart/form-data">
                <div class="modal-header">
                    <h5 class="modal-title" id="pixModalLabel">Pagamento via PIX</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <p class="text-center">Escaneie o QRCode abaixo com o app do seu banco ou copie a chave PIX.</p>
                    <div class="text-center">
                        <img id="pix-qr" src="" alt="QR Code PIX" class="img-fluid mb-3" style="max-width:260px;" />
                    </div>
                    <div class="mb-3 text-center">
                        <strong>Chave PIX:</strong>
                        <div class="input-group mb-2 justify-content-center" style="max-width:420px; margin:auto;">
                            <input type="text" id="pix-key" class="form-control text-center" readonly value="" />
                            <button class="btn btn-outline-secondary" id="copy-pix" type="button">Copiar</button>
                        </div>
                    </div>
                    <p class="mt-2 text-center">Total: <strong id="total-amount">R$ 0,00</strong></p>
                    <hr />

                    <!-- Campos do comprador -->
                    <div class="mb-3">
                        <label for="Nome" class="form-label">Nome</label>
                        <input type="text" class="form-control" id="Nome" name="Nome" required />
                    </div>
                    <div class="mb-3">
                        <label for="Telefone" class="form-label">Telefone</label>
                        <input type="tel" class="form-control" id="Telefone" name="Telefone" required />
                    </div>
                    <div class="mb-3">
                        <label for="Email" class="form-label">E-mail</label>
                        <input type="email" class="form-control" id="Email" name="Email" required />
                    </div>
                    <div class="mb-3">
                        <label for="Email" class="form-label">Localidade</label>
                        <input type="email" class="form-control" id="Email" name="Email" required />
                    </div>
                    <div class="mb-3">
                        <label for="Comprovante" class="form-label">Comprovante de Pagamento (imagem ou PDF)</label>
                        <input type="file" class="form-control" id="Comprovante" name="Comprovante" accept=".jpg,.jpeg,.png,.pdf" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Registrar Pagamento</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        // Inicialização: configuração de paginação
        const pageSize = 50;
        const maxPages = 10; // mostrar até 5 páginas
        let currentPage = 1;
        let totalRifas = 0;
        let rifas = [];

        // Mapa de seleções persistente entre páginas: id -> price
        const selectedMap = new Map();
        const pixKey = document.getElementById('pix-key'); // substitua pela chave real

        function fetchPage(page) {
            fetch(`/rifas?page=${page}&pageSize=${pageSize}`)
                .then(r => r.json())
                .then(data => {
                    rifas = data.items || [];
                    totalRifas = data.totalCount || 0;
                    currentPage = page;
                    renderRifas();
                    renderPagination();
                })
                .catch(err => {
                    console.error('Erro ao carregar rifas:', err);
                    rifas = [];
                    totalRifas = 0;
                    renderRifas();
                    renderPagination();
                });
        }

        function renderPagination() {
            const totalPages = Math.min(maxPages, Math.ceil(totalRifas / pageSize) || 1);
            const containerId = 'rifas-pagination';
            let container = document.getElementById(containerId);
            if (!container) {
                container = document.createElement('div');
                container.id = containerId;
                container.className = 'mt-3 d-flex justify-content-center gap-2';
                const parent = document.querySelector('.col-12');
                parent.appendChild(container);
            }
            container.innerHTML = '';
            for (let p = 1; p <= totalPages; p++) {
                const btn = document.createElement('button');
                btn.className = 'btn btn-sm ' + (p === currentPage ? 'btn-primary' : 'btn-outline-primary');
                btn.textContent = p;
                btn.addEventListener('click', () => fetchPage(p));
                container.appendChild(btn);
            }
        }

        // buscar primeira página ao iniciar
        fetchPage(1);

        function formatBRL(v) {
            return v.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
        }

        function renderRifas() {
            const container = document.getElementById('rifas-list');
            container.innerHTML = '';
            rifas.forEach(r => {
                const col = document.createElement('div');
                col.className = 'col-6 col-md-4 col-lg-3';

                const card = document.createElement('div');
                card.className = 'card h-100';

                const body = document.createElement('div');
                body.className = 'card-body d-flex flex-column';

                const title = document.createElement('h5');
                title.className = 'card-title';
                title.textContent = 'Rifa ' + r.number;

                const price = document.createElement('p');
                price.className = 'card-text mb-2';
                price.textContent = formatBRL(r.price);

                const footer = document.createElement('div');
                footer.className = 'mt-auto';

                const inputGroup = document.createElement('div');
                inputGroup.className = 'form-check';

                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'form-check-input select-rifa';
                checkbox.id = 'rifa-' + r.id;
                checkbox.dataset.id = r.id;
                checkbox.dataset.price = r.price;
                // habilitar apenas se disponível
                if (r.status === 'Disponivel') {
                    checkbox.disabled = false;
                }
                else {
                    checkbox.disabled = true;
                }

                // restaurar estado da seleção se já escolhido em outra página
                if (selectedMap.has(String(r.id))) {
                    checkbox.checked = true;
                }

                // quando mudar, atualizamos o mapa persistente
                checkbox.addEventListener('change', function () {
                    const id = String(this.dataset.id);
                    const price = parseFloat(this.dataset.price || 0);
                    if (this.checked) {
                        selectedMap.set(id, price);
                    } else {
                        selectedMap.delete(id);
                    }
                    updateSelectedUI();
                });

                const label = document.createElement('label');
                label.className = 'form-check-label';
                label.htmlFor = checkbox.id;
                label.textContent = r.status;

                inputGroup.appendChild(checkbox);
                inputGroup.appendChild(label);

                if (r.status === 'Vendida') {
                    const soldBadge = document.createElement('span');
                    soldBadge.className = 'badge bg-danger ms-2';
                    soldBadge.textContent = 'VENDIDA';
                    inputGroup.appendChild(soldBadge);
                } else if (r.status === "Reservada") {
                    const soldBadge = document.createElement('span');
                    soldBadge.className = 'badge bg-warning ms-2';
                    soldBadge.textContent = 'RESERVADA';
                    inputGroup.appendChild(soldBadge);
                }

                footer.appendChild(inputGroup);

                body.appendChild(title);
                body.appendChild(price);
                body.appendChild(footer);

                card.appendChild(body);
                col.appendChild(card);
                container.appendChild(col);
            });

            // atualizar UI de seleção (contagem / botão) de acordo com o mapa persistente
            updateSelectedUI();
        }

        function updateSelectedUI() {
            const count = selectedMap.size;
            document.getElementById('selected-count').textContent = count;
            const concluirBtn = document.getElementById('concluir-btn');
            concluirBtn.disabled = count === 0;
        }

        function calculateTotal() {
            let total = 0;
            for (const price of selectedMap.values()) {
                total += Number(price || 0);
            }
            return total;
        }

        // Antes de abrir o modal, atualizar QR e total
        document.getElementById('concluir-btn').addEventListener('click', function () {
            const total = calculateTotal();
            document.getElementById('total-amount').textContent = formatBRL(total);

            // solicite ao servidor o payload/QRCode em base64 (endpoint de exemplo)
            fetch('/pix?total=' + encodeURIComponent(total))
                .then(response => {
                    if (!response.ok) throw new Error('Erro na geração do PIX');
                    return response.json();
                })
                .then(data => {
                    // defina a chave PIX retornada (se houver)
                    if (data.pix && document.getElementById('pix-key')) {
                        document.getElementById('pix-key').value = data.pix;
                    }

                    // se servidor retornou QR em base64, use-o; caso contrário, fallback para gerar via serviço externo
                    const base64qrcode = data.qrCodeBase64 || data.qr || null;
                    if (base64qrcode) {
                        document.getElementById('pix-qr').src = 'data:image/png;base64,' + base64qrcode;
                    } else {
                        // fallback: gerar QR com api pública usando a chave (pode ser apenas a chave)
                        const payload = (document.getElementById('pix-key') && document.getElementById('pix-key').value) || '';
                        const qrSrc = 'https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=' + encodeURIComponent(payload + '|' + total.toFixed(2));
                        document.getElementById('pix-qr').src = qrSrc;
                    }
                })
                .catch(err => {
                    console.error(err);
                    // fallback simples em caso de erro
                    const payload = (document.getElementById('pix-key') && document.getElementById('pix-key').value) || '';
                    const qrSrc = 'https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=' + encodeURIComponent(payload + '|' + total.toFixed(2));
                    document.getElementById('pix-qr').src = qrSrc;
                });
        });

        // copiar chave PIX
        document.getElementById('copy-pix').addEventListener('click', function () {
            const keyEl = document.getElementById('pix-key');
            keyEl.select();
            try {
                document.execCommand('copy');
                this.textContent = 'Copiado';
                setTimeout(() => this.textContent = 'Copiar', 2000);
            } catch (e) {
                alert('Selecione e copie a chave manualmente: ' + keyEl.value);
            }
        });

        // Observação: renderRifas é chamado após a fetch preencher `rifas`.
    </script>
}